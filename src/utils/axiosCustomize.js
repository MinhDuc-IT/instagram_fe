import axios from 'axios';
import NProgress from 'nprogress';
import { toast } from 'react-toastify';
import { store } from '../redux/store';
// import { UpdateAccessTokenSuccess, UserLogoutSuccess, OpenLoginModal } from '../redux/action/userAction';

const instance = axios.create({
    baseURL: import.meta.env.VITE_BASE_URL,
});

// C·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng cookie trong request
instance.defaults.withCredentials = true;

// T·∫°o bi·∫øn ƒë·ªÉ theo d√µi vi·ªác refresh token (tr√°nh l·∫∑p l·∫°i nhi·ªÅu request refresh c√πng l√∫c)
let isRefreshing = false;
let refreshSubscribers = [];

// H√†m ƒë·ªÉ th·ª±c hi·ªán khi ƒë√£ refresh token xong
const onRefreshed = (newToken) => {
    refreshSubscribers.map((callback) => callback(newToken));
    refreshSubscribers = [];
};

// H√†m ƒë·ªÉ th√™m c√°c request v√†o h√†ng ƒë·ª£i ch·ªù refresh token
const addRefreshSubscriber = (callback) => {
    refreshSubscribers.push(callback);
};

// Th√™m request interceptor
instance.interceptors.request.use(
    function (config) {
        console.log("Request config:", store?.getState());
        const access_token = store?.getState()?.auth?.accessToken;
        console.log("Access Token in request interceptor:", access_token);
        if (access_token) {
            config.headers['Authorization'] = `Bearer ${access_token}`;
        }
        NProgress.start();
        return config;
    },
    function (error) {
        NProgress.done();
        return Promise.reject(error);
    },
);

// Th√™m response interceptor ƒë·ªÉ ki·ªÉm tra v√† l·∫•y refresh token khi access_token h·∫øt h·∫°n
instance.interceptors.response.use(
    function (response) {
        NProgress.done();
        return response && response.data ? response.data : response;
    },
    // async function (error) {
    //     NProgress.done();
    //     const { config, response } = error;
    //     const originalRequest = config;

    //     // Ki·ªÉm tra n·∫øu l·ªói tr·∫£ v·ªÅ l√† 401 (Unauthorized) v√† l·ªói n√†y kh√¥ng ph·∫£i l√† l·ªói c·ªßa refresh token
    //     if (response && response.status === 401 && !originalRequest._retry) {
    //         if (!isRefreshing) {
    //             // ƒê√°nh d·∫•u r·∫±ng ƒëang th·ª±c hi·ªán refresh token
    //             isRefreshing = true;

    //             try {
    //                 // const refresh_token = store?.getState()?.user?.account?.refresh_token;
    //                 // G·ª≠i request l·∫•y access token m·ªõi b·∫±ng refresh token
    //                 // const res = await axios.post(
    //                 //     `${process.env.REACT_APP_BASE_URL}customer/refresh_token`,
    //                 //     {
    //                 //         refresh_token: refresh_token,
    //                 //     },
    //                 //     {
    //                 //         withCredentials: true,
    //                 //     },
    //                 // );
    //                 // if (res && res.data.DT) {
    //                 //     const newAccessToken = res.data.DT.access_token;
    //                 //     // C·∫≠p nh·∫≠t access token m·ªõi v√†o redux store
    //                 //     // store.dispatch(UpdateAccessTokenSuccess(newAccessToken));
    //                 //     // C·∫≠p nh·∫≠t l·∫°i Authorization header cho c√°c request ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán tr∆∞·ªõc ƒë√≥
    //                 //     originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
    //                 //     // Th·ª±c hi·ªán l·∫°i c√°c request ƒëang ch·ªù ƒë·ª£i refresh token xong
    //                 //     onRefreshed(newAccessToken);
    //                 //     isRefreshing = false;

    //                 //     // G·ª≠i l·∫°i request tr∆∞·ªõc ƒë√≥ v·ªõi access token m·ªõi
    //                 //     return instance(originalRequest);
    //                 // }
    //                 // if (res && res.data.EC !== 0) {
    //                 //     // store.dispatch(UserLogoutSuccess());
    //                 //     // store.dispatch(OpenLoginModal(true));    
    //                 // }
    //             } catch (err) {
    //                 isRefreshing = false;
    //                 console.log('Unable to refresh token', err);
    //                 return Promise.reject(err);
    //             }
    //         }

    //     // Ch·ªù ƒë·ª£i refresh token ho√†n th√†nh v√† th·ª±c hi·ªán l·∫°i request v·ªõi access token m·ªõi
    //         const retryOriginalRequest = new Promise((resolve) => {
    //             addRefreshSubscriber((newToken) => {
    //                 originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
    //                 resolve(instance(originalRequest));
    //             });
    //         });

    //         return retryOriginalRequest;
    //     }

    //     // N·∫øu l·ªói kh√¥ng ph·∫£i 401 ho·∫∑c l√† l·ªói c·ªßa refresh token, tr·∫£ v·ªÅ l·ªói nh∆∞ b√¨nh th∆∞·ªùng
    //     return response && response.data ? response.data : Promise.reject(error);
    // },
    async function (error) {
        NProgress.done();
        const { config, response } = error;
        const originalRequest = config;

        // üî• N·∫øu l·ªói kh√¥ng c√≥ response (m·∫•t m·∫°ng ch·∫≥ng h·∫°n)
        if (!response) {
            return Promise.reject(error);
        }

        // ‚ùå N·∫øu l√† g·ªçi API login ho·∫∑c refresh m√† b·ªã 401 ‚Üí kh√¥ng x·ª≠ l√Ω refresh token
        const isAuthEndpoint =
            originalRequest.url.includes('/auth/login') ||
            originalRequest.url.includes('/auth/logout') ||
            originalRequest.url.includes('/auth/refresh');

        if (response.status === 401 && !isAuthEndpoint && !originalRequest._retry) {
            if (!isRefreshing) {
                isRefreshing = true;

                try {
                    // L·∫•y refresh_token (v√≠ d·ª• t·ª´ cookie ho·∫∑c localStorage)
                    // const refresh_token = store.getState().auth.refresh_token;
                    // const res = await axios.post(`${import.meta.env.VITE_BASE_URL}/auth/refresh`, { refresh_token }, { withCredentials: true });

                    // Gi·∫£ s·ª≠ BE tr·∫£ v·ªÅ token m·ªõi:
                    // const newToken = res.data.access_token;

                    // G·∫Øn l·∫°i token m·ªõi v√†o header
                    // store.dispatch(updateAccessToken(newToken));
                    // originalRequest.headers['Authorization'] = `Bearer ${newToken}`;

                    // G·ªçi l·∫°i nh·ªØng request ƒëang ch·ªù
                    onRefreshed(/*newToken*/);
                    isRefreshing = false;

                    // Retry l·∫°i request c≈©
                    return instance(originalRequest);
                } catch (err) {
                    isRefreshing = false;
                    console.log('Refresh token failed:', err);
                    return Promise.reject(err);
                }
            }

            // N·∫øu ƒëang trong l√∫c refresh ‚Üí cho c√°c request kh√°c ƒë·ª£i
            const retryOriginalRequest = new Promise((resolve) => {
                addRefreshSubscriber((newToken) => {
                    originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
                    resolve(instance(originalRequest));
                });
            });

            return retryOriginalRequest;
        }

        // üß† N·∫øu l√† 401 do login sai ho·∫∑c refresh sai ‚Üí reject v·ªÅ saga
        return Promise.reject(error);
    }
);

export default instance;
